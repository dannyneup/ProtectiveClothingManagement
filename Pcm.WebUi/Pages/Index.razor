@page "/"
@using Pcm.Infrastructure.ResponseModels
@using Pcm.WebUi.Refactor.Models
<MudContainer Class="mt-16">


    <MudDataGrid T="TrainingResponse" 
                 Items="@Elements" 
                 SortMode="SortMode.Multiple" 
                 QuickFilter="@_quickFilter"
                 SelectedItemsChanged="@SelectedItemsChanged">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Laufende Ausbildungen</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <HierarchyColumn T="TrainingResponse" />
            <PropertyColumn Property="x => x.Id"/>
            <PropertyColumn Property="x => x.Title" SortBy="@_sortBy" Title="Bezeichnung"/>
            <PropertyColumn Property="x => x.Type" Title="Ausbildungstyp"/>
            <PropertyColumn Property="x => x.TraineeCount" Title="Anzahl Auszubildene"/>
            <PropertyColumn Property="x => x.YearStarted" Title="Ausbildungsbeginn"/>
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudStack Row>
                        <MudButton
                            OnClick="@(() => { NavigationManager.NavigateTo($"/editor/{((TrainingResponse) context.Item).Id}"); })"
                            Size="@Size.Small"
                            Variant="@Variant.Filled"
                            Color="@Color.Primary">
                            bearbeiten
                        </MudButton>
                        <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Secondary">archivieren</MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <ChildRowContent>
            <MudCard Elevation="0">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Auszubildene</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <TraineesTable TrainingId="context.Item.Id" />
                </MudCardContent>
            </MudCard>
        </ChildRowContent>
    </MudDataGrid>
</MudContainer>

@code {
    
    [Inject]
    public TrainingModel TrainingModel { get; set; }
    
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    
    private IEnumerable<TrainingResponse> Elements = new List<TrainingResponse>();
    private string _searchString;
    private bool _sortNameByLength;

    private Func<TrainingResponse, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Title.Length;
        return x.Title;
    };
    
    private Func<TrainingResponse, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Title.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Type.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Id} {x.TraineeCount} {x.YearStarted}".Contains(_searchString))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        Elements = TrainingModel.Trainings;
    }

    void RowClicked(DataGridRowClickEventArgs<TrainingResponse> args)
    {
        Console.WriteLine("Row clicked");
    }

    void SelectedItemsChanged(HashSet<TrainingResponse> items)
    {
        Console.WriteLine("Selection Changed");
    }
}